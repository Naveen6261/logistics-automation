function sendEmailsBasedOnColumnX() {
  try {
    var spreadsheetId = '189rAmrwW05wnRk8-PVmEBY3PKwNFNy04cJMXyyQ04y4';
    var sheetName = 'POD Processed';
    var settingsSheetName = 'Settings';
    var folderId = '1tXeYc6VbuIwKTjWPOEAa_wKUp1h3Fz_8';
    var tcSheetId = '1PjBU4LN2WoUrBi4w-p1omLFCtfMmtyLeUi9o7Xh5dAw';
    var tcSheetName = 'T_C_D';

    var ss = SpreadsheetApp.openById(spreadsheetId);
    var sheet = ss.getSheetByName(sheetName);
    var settingsSheet = ss.getSheetByName(settingsSheetName);
    var tcSheet = SpreadsheetApp.openById(tcSheetId).getSheetByName(tcSheetName);

    var dataRange = sheet.getDataRange().getValues();
    var settingsData = settingsSheet.getDataRange().getValues();
    var tcDataRange = tcSheet.getDataRange().getValues();
    
    var settingsEmailMap = {};
    var settingsBranchEmailMap = {};

    // Map names and emails from settings sheet (I for names, J for emails)
    for (var i = 1; i < settingsData.length; i++) {
      var name = settingsData[i][8]; // Column I
      var email = settingsData[i][9]; // Column J
      settingsEmailMap[name] = email;

      var branchName = settingsData[i][0]; // Column A
      var branchEmail = settingsData[i][7]; // Column H
      settingsBranchEmailMap[branchName] = branchEmail;
    }

    for (var i = 1; i < dataRange.length; i++) {
      var valueU = dataRange[i][23]; // Column X
      var valueV = dataRange[i][24]; // Column Y
      var valueO = dataRange[i][14]; // Column O

      // Only proceed if X = 1, Y is blank, and O is FALSE
      if (valueU === 1 && valueV === '' && valueO === false) {
        var txnNo = dataRange[i][3].toString(); // Column D
        var branchName = dataRange[i][6]; // Column G
        var subjectLine = dataRange[i][15]; // Column P

        var subject = `Urgent: ${branchName} ${txnNo} Shortage/Damage Mentioned :  ${subjectLine}`;
        var podReceivedDate = formatDate(new Date(dataRange[i][1])); // Column B
        var courierBarcodeNumber = dataRange[i][4]; // Column E
        var valueK = dataRange[i][10]; // Column K
        var valueL = dataRange[i][11]; // Column L

        var toEmails = [];
        if (settingsBranchEmailMap[branchName]) toEmails.push(settingsBranchEmailMap[branchName]);

        var ccEmails = ['POD@lobb.in,ranjan.jena@lobb.in,samreen.tamboli@lobb.in,accounts@lobb.in'];
        var namesNotAdded = [];

        var orderReceivedBy = '';
        var truckPlacedBy = '';

        for (var j = 1; j < tcDataRange.length; j++) {
          if (tcDataRange[j][5].toString().trim() === txnNo) {
            orderReceivedBy = tcDataRange[j][19]; // Column T
            truckPlacedBy = tcDataRange[j][20]; // Column U
            break;
          }
        }

        if (settingsEmailMap[orderReceivedBy]) {
          ccEmails.push(settingsEmailMap[orderReceivedBy]);
        } else {
          namesNotAdded.push(`Order Received By: ${orderReceivedBy}`);
        }

        if (settingsEmailMap[truckPlacedBy]) {
          ccEmails.push(settingsEmailMap[truckPlacedBy]);
        } else {
          namesNotAdded.push(`Truck Placed By: ${truckPlacedBy}`);
        }

        if (/^\d{5,6}$/.test(txnNo)) {
          var tcValues = "";
          var found = false;

          for (var j = 1; j < tcDataRange.length; j++) {
            if (tcDataRange[j][5].toString().trim() === txnNo) {
              tcValues += `Loading Date: ${formatDate(new Date(tcDataRange[j][3]))}<br> \n`;
              tcValues += `Truck No: ${tcDataRange[j][6]}<br> \n`;
              tcValues += `From City: ${tcDataRange[j][8]}<br> \n`;
              tcValues += `To City: ${tcDataRange[j][9]}<br> \n`;
              tcValues += `<strong>Transporter Name: ${tcDataRange[j][21]}</strong><br> \n`;
              tcValues += `<strong>Trucker Name: ${tcDataRange[j][22]} </strong><br> \n`;
              tcValues += `<strong>Traffic Person Name: ${tcDataRange[j][19]} </strong><br> \n`;

              found = true;
              break;
            }
          }

          if (!found) {
            tcValues = "Trip details not found.";
            sheet.getRange(i + 1, 25).setValue(tcValues);
            continue;
          }
        } else {
          tcValues = "Transaction number is not valid.";
          sheet.getRange(i + 1, 25).setValue(tcValues);
          continue;
        }

        var body = `<p>Dear Branch Team,</p>
<p>Please be informed remarks mentioned in the <strong>POD</strong>:</p>
<p><strong>${subjectLine}</strong></p>
<p>Trip ID: ${txnNo}<br>
POD received date: ${podReceivedDate}<br>
${valueK} Document number: ${valueL} (Scan copy is attached)<br>
${tcValues}</p>
<p>This matter requires immediate attention. Please take up the issue with the transporter to understand the root cause and discuss the financial implications, including any costs payable or receivable as soon as possible. It is crucial that this matter is resolved promptly to avoid any further discrepancies.</p>
<p><span style="background-color: yellow;">Please update the LOBB Office by entering the estimated value of deductions for truckers.</span></p>
<p>Thank you for your prompt action on this matter.</p>
<p>Thanks and Regards,<br>
Centralized POD<br>
Lobb HO</p>`;

        var folder = DriveApp.getFolderById(folderId);
        var files = folder.getFiles();
        var attachment = null;

        while (files.hasNext()) {
          var file = files.next();
          if (file.getName().includes(txnNo)) {
            attachment = file;
            break;
          }
        }

        if (attachment) {
          try {
            GmailApp.createDraft(toEmails.join(','), subject, '', {
              cc: ccEmails.join(','),
              attachments: [attachment],
              htmlBody: body
            });

            var userEmail = Session.getActiveUser().getEmail();
            var logMessage = namesNotAdded.length > 0
              ? `Names not added: ${namesNotAdded.join(', ')} - ${userEmail} - ${new Date()}`
              : `Email sent successfully - ${userEmail} - ${new Date()}`;
            sheet.getRange(i + 1, 25).setValue(logMessage);

          } catch (emailError) {
            sheet.getRange(i + 1, 25).setValue('Email sending failed: ' + emailError.message + ' ' + new Date());
          }

        } else {
          Logger.log('Attachment not found for TXN No: ' + txnNo);
          sheet.getRange(i + 1, 25).setValue('Attachment not found ' + new Date());
        }
      }
    }
  } catch (e) {
    Logger.log('Error occurred: ' + e.toString());
  }
}

function formatDate(date) {
  return Utilities.formatDate(date, Session.getScriptTimeZone(), 'dd-MM-yyyy');
}
