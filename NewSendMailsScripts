var TrackingPersonCol;
var ListedDateCol;
var BranchCol;
var LoadingDateCol;
var ExpectedDeliveryDateCol;
var TxnNoCol;
var TruckNoCol;
var DrivermobilenumberCol;
var FromCityCol;
var ToCityCol;
var StatusCol;
var SubStatusCol;
var RemarksCol;
var NearUnloadingDateCol;
var NearUnloadingTimeCol;
var ReportingDateCol;
var ReportingTimeCol;
var UnloadingDateCol;
var UnloadingTimeCol;
var OrderReceivedByCol;
var TruckPlacedByCol;
var TransporterNameCol;
var TruckerNameCol;
var TruckTypeCol;
var InformedSupplyTeamCol;
var MailSentOnCol;
var PriorityVehicleCol;
var GPSConsentedcol;
var TATCol;

function NewAssignHeaderColumnNumbers() {

  var headerRow = 2;
  var sheet = SpreadsheetApp.getActiveSpreadsheet().getActiveSheet();
  if (sheet.getName() == "Tracking Data") {
    headerRow = 6;
  }
  var headerData = sheet.getRange(headerRow, 1, 1, sheet.getLastColumn()).getValues()[0];

  TrackingPersonCol = headerData.indexOf("Tracking Person") + 1;
  ListedDateCol = headerData.indexOf("Listed Date") + 1;
  BranchCol = headerData.indexOf("Branch") + 1;
  LoadingDateCol = headerData.indexOf("Loading Date") + 1;
  ExpectedDeliveryDateCol = headerData.indexOf("Expected Delivery Date") + 1;
  TxnNoCol = headerData.indexOf("Txn No") + 1;
  TruckNoCol = headerData.indexOf("Truck No") + 1;
  DrivermobilenumberCol = headerData.indexOf("Driver mobile number") + 1;
  FromCityCol = headerData.indexOf("From City") + 1;
  ToCityCol = headerData.indexOf("To City") + 1;
  StatusCol = headerData.indexOf("Status") + 1;
  SubStatusCol = headerData.indexOf("Sub Status") + 1;
  RemarksCol = headerData.indexOf("Remarks") + 1;
  NearUnloadingDateCol = headerData.indexOf("Near Unloading Date") + 1;
  NearUnloadingTimeCol = headerData.indexOf("Near Unloading Time") + 1;
  ReportingDateCol = headerData.indexOf("Reporting Date") + 1;
  ReportingTimeCol = headerData.indexOf("Reporting Time") + 1;
  UnloadingDateCol = headerData.indexOf("Unloading Date") + 1;
  UnloadingTimeCol = headerData.indexOf("Unloading Time") + 1;
  OrderReceivedByCol = headerData.indexOf("Order Received By") + 1;
  TruckPlacedByCol = headerData.indexOf("Truck Placed By") + 1;
  TransporterNameCol = headerData.indexOf("Transporter Name") + 1;
  TruckerNameCol = headerData.indexOf("Trucker Name") + 1;
  TruckTypeCol = headerData.indexOf("Truck Type") + 1;
  InformedSupplyTeamCol = headerData.indexOf("Informed Supply Team") + 1;
  MailSentOnCol = headerData.indexOf("Mail Sent On") + 1;
  PriorityVehicleCol = headerData.indexOf("Priority Vehicle") + 1;
  GPSConsentedcol = headerData.indexOf("GPS Consented") + 1;
  TATCol = headerData.indexOf("TAT") + 1; // Column AF

}

function ButtonSendMailNew() {

  // assign column numbers to global variables
  NewAssignHeaderColumnNumbers();

  var sheet = SpreadsheetApp.getActiveSpreadsheet().getActiveSheet();
  var activeRange = sheet.getActiveRange();
  var activeRow = activeRange.getRow();
  var lastRow = sheet.getLastRow();

  if (activeRow < 6 || activeRow > lastRow) {
    showMessageBoxOK("Warning", "Selected row " + activeRow + ", Select a row that has tracking data");
    return;
  }

  var mailSentOn = sheet.getRange(activeRow, MailSentOnCol).getValue();
  if (mailSentOn !== "") {
    if (!responseYesNoDialog("Mail already sent", "Do you want to send again")) {
      return;
    }
  }

  SendEmail(activeRow, sheet, userName);

  // update sheet with sent data/time and user name
  var userName = Session.getActiveUser().getEmail();
  userName = userName.replace("@lobb.in", "");
  var sentDateTime = Utilities.formatDate(new Date(), Session.getScriptTimeZone(), "dd-MM-yyyy HH:mm:ss");
  sheet.getRange(activeRow, MailSentOnCol).setValue(mailSentOn + " ; " + userName + ": " + sentDateTime);

}

function SendEmail(activeRow, sheet, userName) {

  var settingsSheet = SpreadsheetApp.getActiveSpreadsheet().getSheetByName("Settings");

  // get tracking data values
  var branchName = sheet.getRange(activeRow, BranchCol).getValue();
  if (branchName === null) {
    showMessageBoxOK("Warning; Branch Name missing; Select a row that has tracking data");
    return;
  }
  var subStatus = sheet.getRange(activeRow, SubStatusCol).getValue();
  var status = sheet.getRange(activeRow, StatusCol).getValue();
  if (status == "In Transit" && subStatus == "Language Issue") {
    showMessageBoxOK("Warning; You can't send mail for this remarks : " + subStatus);
    return;
  }

  var loadingDate = sheet.getRange(activeRow, LoadingDateCol).getValue();
  var transcation = sheet.getRange(activeRow, TxnNoCol).getValue();
  var truckNo = sheet.getRange(activeRow, TruckNoCol).getValue();
  var driverNo = sheet.getRange(activeRow, DrivermobilenumberCol).getValue();
  var truckerName = sheet.getRange(activeRow, TruckerNameCol).getValue();
  var fromCity = sheet.getRange(activeRow, FromCityCol).getValue();
  var toCity = sheet.getRange(activeRow, ToCityCol).getValue();
  var orderReceivedBy = sheet.getRange(activeRow, OrderReceivedByCol).getValue();
  var truckPlacedBy = sheet.getRange(activeRow, TruckPlacedByCol).getValue();
  var gpsconsented = sheet.getRange(activeRow, GPSConsentedcol).getValue();
  var ExpectedDeliveryDate = sheet.getRange(activeRow, ExpectedDeliveryDateCol).getValue();
  var TAT = sheet.getRange(activeRow, TATCol).getValue();
  var ReportingDate = sheet.getRange(activeRow, ReportingDateCol).getValue();

 
  var ccEmail = worksheetFunctionQuery(settingsSheet, "A:H", "A", "H", branchName);
  if (!ccEmail || ccEmail === "") {
    showMessageBoxOK("Warning; Branch Name is invalid or CC Mail is blank;Inform your Team Lead or Manager to fix the data");
    return;
  }

  var orderReceivedByEmail = worksheetFunctionQuery(settingsSheet, "A:J", "I", "J", orderReceivedBy);
  if (!orderReceivedByEmail || orderReceivedByEmail === "") {
    showMessageBoxOK("Warning; Order Received By Name is invalid, sent email to branch manager");
    orderReceivedByEmail = ccEmail;
  }

  var truckPlacedByEmail = worksheetFunctionQuery(settingsSheet, "A:J", "I", "J", truckPlacedBy);
  if (!truckPlacedByEmail || truckPlacedByEmail === "") {
    showMessageBoxOK("Warning; Truck Placed By Name is invalid, sent email to branch manager");
    truckPlacedByEmail = ccEmail;
  }

  if (orderReceivedByEmail == truckPlacedByEmail) {
    recipientEmail = orderReceivedByEmail; // both orderReceivedByMail and truckPlacedByEmail IDs are not avilalbe
  } else {
    recipientEmail = orderReceivedByEmail + ";" + truckPlacedByEmail;
  }
  var subject = branchName+ "-Tracking -" + transcation + " Status : " + status;
  if (TAT.toLowerCase().includes("delay")) {
    subject += ": "+TAT ;
  }
  var body = "Truck Details \n\n";
  //  body = body + "Loading Date : " + formatDateToString(loadingDate) + "\n";
  if (loadingDate instanceof Date) {
    var loadingDateStr = loadingDate = Utilities.formatDate(loadingDate, Session.getScriptTimeZone(), "dd-MM-yyyy");
  } else {
    var loadingDateStr = loadingDate;
  }
  if (ExpectedDeliveryDate instanceof Date) {
    var ExpectedDeliveryDateStr = Utilities.formatDate(ExpectedDeliveryDate, Session.getScriptTimeZone(), "dd-MM-yyyy");
  } else {
    var ExpectedDeliveryDateStr = ExpectedDeliveryDate;
  }
   if (ReportingDateCol instanceof Date) {
    var ReportingDateStr = Utilities.formatDate(ReportingDate, Session.getScriptTimezone(), "dd-MM-yyyy");
  } else {
    var ReportingDateStr = ReportingDate;
  }
// Include Transporter Name if SubStatusCol contains specific values added in 30 jan 2025 7lines NKM 
  var subStatusValues = ["Vehicle Accident", "Vehicle Breakdown", "Waiting for Loading", "Waiting for LR/documents", "Waiting for Unloading", "Delay Unloading", "Delay Loading/documents received delay", "Delay Unloading"];
  if (subStatusValues.includes(subStatus)) {
    var transporterName = sheet.getRange(activeRow, TransporterNameCol).getValue();
   // added  body = body + "\nTransporter Name: " + transporterName; before trcker name 
  }
  // Include Reporting Date and Time if StatusCol is "Reported" added in 30 jan 2025 5lines from here NKM
  if (status == "Reported") {
  var reportingDate = sheet.getRange(activeRow, ReportingDateCol).getValue();
  var reportingTime = sheet.getRange(activeRow, ReportingTimeCol).getValue();
  }
  
  body = body + "TAT  Reporting Date at destination : " + TAT + "\n";
  body = body + "Loading Date : " + loadingDateStr + "\n";
  body = body + "Expected Delivery Date : " + ExpectedDeliveryDateStr + "\n";
  body = body + "Transporter Name: " + transporterName +"\n";
  body = body + "Trucker Name : " + truckerName + "\n";
  body = body + "Truck Number : " + truckNo + "\n";
  body = body + "Truck Driver Number : " + driverNo + "\n";
  body = body + "From City : " + fromCity + "\n";
  body = body + "To City : " + toCity + "\n";
  body = body + "Order Received By : " + orderReceivedBy + "\n";
  body = body + "Truck Placed By : " + truckPlacedBy + "\n";
  body = body + "GPS Consent status : " + gpsconsented + "\n";
  //body = body + "Reported Date: " + ReportingDateStr + "\n";
  //body = body + "Reporting Date and Time: " + formatDate(reportingDate) + " " + reportingTime + "\n";
  if (reportingDate instanceof Date) {
  body = body + "Reporting Date and Time: " + formatDate(reportingDate) + " " + formatTime(reportingTime) + "\n";
  }

  body = body + "Status : " + subStatus + ".\n\nProvide needed information and/or take suitable action at your side. \n\nThis is a manually triggered email.";

  // Create the draft email
  var draft = GmailApp.createDraft(
    recipientEmail,
    subject,
    body, {
      cc: ccEmail + ";" + ";riyaz.blr@lobb.in;alfiz.sha@lobb.in;mylari.gupta@lobb.in;naveenkumar.m@lobb.in"
    }
  );
}

function GetSettingsValues(sheet, searchKey, returnCol) {

  var dataRange = sheet.getRange("A2:D30");

  // Get the values in the data range as a 2D array
  var data = dataRange.getValues();

  // Loop through the data to find a match
  for (var i = 0; i < data.length; i++) {
    var row = data[i];
    if (row[0] == searchKey) {
      var foundValue = row[returnCol];
      return foundValue;
    }
  }
 return null;
 }


function DoNothing() {
  showMessageBoxOK("Wait", "Sending Mail Not Enabled !");
}
